@inherits UmbracoViewPage<IPublishedContent>
@{
    Layout = null;
    var parent = Model.Parent;
    @DrawNode(parent)
    @DrawVisibleChildNodes(parent)
    var newsRoot = parent.Children().FirstOrDefault(i => i.DocumentTypeAlias == "umbNewsOverview");
    if (newsRoot != null)
    {
        @DrawChildNodes(newsRoot)
    }
    var humanNodes = parent.Descendants("umbHumansOverview");
    foreach (var humanNode in humanNodes)
    {
        @DrawChildNodes(humanNode)
    }
    var worksRoot = parent.Children().FirstOrDefault(i => i.DocumentTypeAlias == "WorksOverview");
    if (worksRoot != null)
    {
        @DrawChildNodes(worksRoot)
    }
}

@helper DrawVisibleChildNodes(IPublishedContent startNode)
{
    foreach (var node in startNode.Children.Where(x => x.IsVisible()))
    {
        @DrawNode(node)
        @DrawVisibleChildNodes(node)
    }
}

@helper DrawChildNodes(IPublishedContent startNode)
{
    foreach (var node in startNode.Children)
    {
        @DrawNode(node)
    }
}

@helper DrawNode(IPublishedContent node)
{
    <url>
        <loc>@GetUrlWithDomainPrefix(node.Url)</loc>
        <lastmod>@(string.Format("{0:s}+00:00", node.UpdateDate))</lastmod>
    </url>
}

@functions {
    private static string GetUrlWithDomainPrefix(string url)
    {

        if (url.StartsWith("/"))
            url = url.Substring(1);

        var domainPrefix = string.Format("http://{0}/", HttpContext.Current.Request.ServerVariables["HTTP_HOST"]);

        if (url.StartsWith(domainPrefix))
            return url;
        else
            return domainPrefix + url;
    }
}